package fr.mossaab.security.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fr.mossaab.security.config.AesDecryptService;
import fr.mossaab.security.dto.payment.InvoiceStatusData;
import fr.mossaab.security.dto.payment.RustoreCallbackRequest;
import fr.mossaab.security.dto.payment.VerifiedPurchaseRequest;
import fr.mossaab.security.entities.PurchaseMapping;
import fr.mossaab.security.repository.PurchaseMappingRepository;
import fr.mossaab.security.service.PaymentService;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/payment")
@RequiredArgsConstructor
@Tag(name = "–ü–ª–∞—Ç–µ–∂–∏", description = "–ü–æ–∫—É–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ RuStore")
public class PaymentController {

    private final PaymentService paymentService;
    private final AesDecryptService aesDecryptService;
    private final ObjectMapper objectMapper;
    private final PurchaseMappingRepository repository;
    @GetMapping("/ping")
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("–ü—Ä–∏–≤–µ—Ç");
    }

    @PostMapping("/mapping")
    public ResponseEntity<?> save(@RequestParam String purchaseId, @RequestParam Long userId) {
        if (repository.findByPurchaseId(purchaseId).isEmpty()) {
            repository.save(PurchaseMapping.builder()
                    .purchaseId(purchaseId)
                    .userId(userId)
                    .build()
            );
        }
        return ResponseEntity.ok("‚úÖ Mapping —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    }

    @PostMapping("/verify")
    public ResponseEntity<String> verifyCallback(@RequestBody RustoreCallbackRequest callbackRequest,
                                                 HttpServletRequest request) {
        try {
            String ip = request.getRemoteAddr();
            String userAgent = request.getHeader("User-Agent");

            System.out.println("üì° IP: " + ip);
            System.out.println("üß≠ User-Agent: " + userAgent);
            System.out.println("üì• Encrypted Payload (Base64): " + callbackRequest.getPayload());

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            String decryptedJson = aesDecryptService.decrypt(callbackRequest.getPayload());
            System.out.println("üîì Decrypted JSON: " + decryptedJson);

            // –†–∞–∑–±–æ—Ä JSON
            JsonNode root = objectMapper.readTree(decryptedJson);
            String type = root.get("notification_type").asText();

            if ("INVOICE_STATUS".equals(type)) {
                JsonNode dataNode = root.get("data");
                String rawData = root.get("data").asText(); // –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                InvoiceStatusData invoice = objectMapper.readValue(rawData, InvoiceStatusData.class);

                if ("confirmed".equals(invoice.getStatusNew())) {
                    int updated = paymentService.handleInvoice(invoice);
                    return ResponseEntity.ok("‚úÖ INVOICE_STATUS –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ì—Ä—É—à–∏: " + updated);
                } else {
                    System.out.println("‚ÑπÔ∏è INVOICE_STATUS: —Å—Ç–∞—Ç—É—Å = " + invoice.getStatusNew());
                    return ResponseEntity.ok("‚ÑπÔ∏è INVOICE_STATUS –ø—Ä–æ–ø—É—â–µ–Ω.");
                }
            }

            // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–±–æ–µ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏)
            if ("PURCHASE".equals(type) || root.has("signature")) {
                VerifiedPurchaseRequest purchase = objectMapper.readValue(decryptedJson, VerifiedPurchaseRequest.class);
                int updatedPears = paymentService.verifyAndHandlePurchase(purchase);
                return ResponseEntity.ok("‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + updatedPears);
            }

            return ResponseEntity.ok("üîî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + type);

        } catch (IllegalArgumentException e) {
            System.err.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: " + e.getMessage());
            return ResponseEntity.badRequest().body("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
        }
    }
}

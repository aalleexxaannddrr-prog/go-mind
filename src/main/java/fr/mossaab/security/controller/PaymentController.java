package fr.mossaab.security.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import fr.mossaab.security.config.AesDecryptService;
import fr.mossaab.security.dto.payment.RustoreCallbackRequest;
import fr.mossaab.security.dto.payment.VerifiedPurchaseRequest;
import fr.mossaab.security.dto.payment.PaymentResponse;
import fr.mossaab.security.service.PaymentService;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/payment")
@RequiredArgsConstructor
@Tag(name = "–ü–ª–∞—Ç–µ–∂–∏", description = "–ü–æ–∫—É–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ RuStore")
public class PaymentController {

    private final PaymentService paymentService;
    private final AesDecryptService aesDecryptService;
    private final ObjectMapper objectMapper;

    @GetMapping("/ping")
    public ResponseEntity<String> ping() {
        return ResponseEntity.ok("–ü—Ä–∏–≤–µ—Ç");
    }

    @PostMapping("/verify")
    public ResponseEntity<String> verifyCallback(@RequestBody RustoreCallbackRequest callbackRequest,
                                                 HttpServletRequest request) {
        try {
            String ip = request.getRemoteAddr();
            String userAgent = request.getHeader("User-Agent");

            System.out.println("üì° IP: " + ip);
            System.out.println("üß≠ User-Agent: " + userAgent);
            System.out.println("üì• Encrypted Payload (Base64): " + callbackRequest.getPayload());

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
            String decryptedJson = aesDecryptService.decrypt(callbackRequest.getPayload());
            System.out.println("üîì Decrypted JSON: " + decryptedJson);

            // –ü–∞—Ä—Å–∏–Ω–≥ –≤ –æ–±—ä–µ–∫—Ç
            VerifiedPurchaseRequest purchase = objectMapper.readValue(decryptedJson, VerifiedPurchaseRequest.class);
            System.out.println("üì¶ Purchase: " + purchase);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏ –ª–æ–≥–∏–∫–∞
            int updatedPears = paymentService.verifyAndHandlePurchase(purchase);
            return ResponseEntity.ok("‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + updatedPears);

        } catch (IllegalArgumentException e) {
            System.err.println("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: " + e.getMessage());
            return ResponseEntity.badRequest().body("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
        }
    }


}
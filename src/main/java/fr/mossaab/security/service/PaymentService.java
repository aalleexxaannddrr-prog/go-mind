package fr.mossaab.security.service;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.*;

import fr.mossaab.security.config.SignatureUtil;
import fr.mossaab.security.dto.payment.InvoiceStatusData;
import fr.mossaab.security.dto.payment.VerifiedPurchaseRequest;
import fr.mossaab.security.entities.Payment;
import fr.mossaab.security.entities.PurchaseMapping;
import fr.mossaab.security.entities.User;
import fr.mossaab.security.repository.PaymentRepository;
import fr.mossaab.security.repository.PurchaseMappingRepository;
import fr.mossaab.security.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class PaymentService {
    private final PurchaseMappingRepository purchaseMappingRepository;
    private final PaymentRepository paymentRepository;
    private final UserRepository userRepository;
    private BigDecimal fetchAmountFromRuStore(String purchaseToken) {
        try {
            String url = "https://public-api.rustore.ru/public/purchase/" + purchaseToken;

            HttpHeaders headers = new HttpHeaders();
            headers.set("Public-Token", "–¢–í–û–ô_API_–¢–û–ö–ï–ù"); // üîê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

            HttpEntity<Void> entity = new HttpEntity<>(headers);

            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<Map> response = restTemplate.exchange(url, HttpMethod.GET, entity, Map.class);

            Map<String, Object> body = (Map<String, Object>) response.getBody().get("body");
            Map<String, Object> paymentInfo = (Map<String, Object>) body.get("payment_info");
            double amount = Double.parseDouble(paymentInfo.get("amount").toString());

            return BigDecimal.valueOf(amount);
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∏–∑ RuStore API: " + e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    private int convertAmountToPears(BigDecimal amount) {
        if (amount.compareTo(BigDecimal.valueOf(100)) == 0) return 1;
        if (amount.compareTo(BigDecimal.valueOf(1000)) == 0) return 10;
        if (amount.compareTo(BigDecimal.valueOf(5000)) == 0) return 50;
        if (amount.compareTo(BigDecimal.valueOf(10000)) == 0) return 100;
        return 0;
    }

    public int verifyAndHandlePurchase(VerifiedPurchaseRequest request) {
        if (request.getSignature() == null || request.getOrderId() == null) {
            return 0; // —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
        }

        boolean validSignature = SignatureUtil.verifySignature(request);
        if (!validSignature) throw new SecurityException("Invalid signature from RuStore");

        if (paymentRepository.existsByTransactionId(request.getOrderId())) {
            return 0; // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        }

        Long userId = Long.valueOf(request.getDeveloperPayload());
        int pears = calculatePears(request.getProductId(), request.getQuantity());

        Payment payment = Payment.builder()
                .userId(userId)
                .productId(request.getProductId())
                .transactionId(request.getOrderId())
                .amount(BigDecimal.valueOf(pears * 100))
                .confirmed(true)
                .build();

        paymentRepository.save(payment);

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        user.setPears(user.getPears() + pears);
        userRepository.save(user);

        return user.getPears();
    }


    public int handleInvoice(InvoiceStatusData invoice) {
        String purchaseId = invoice.getPurchaseId();     // bdc9bfe8-78b8-4361-a017-7cc62fa37d6f
        String orderId = invoice.getOrderId();           // 1
        String productCode = invoice.getProductCode();    // pear_id / pear_pack_10 / ...

        // 1. –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å userId –∏–∑ –Ω–∞—à–µ–π –ë–î, –∫—É–¥–∞ —Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–ª–∏ (purchaseId -> userId)
        Long userId = purchaseMappingRepository.findByPurchaseId(purchaseId)
                .map(PurchaseMapping::getUserId)
                .orElse(null);

        // –ï—Å–ª–∏ userId –Ω–µ –Ω–∞—à–ª–∏, –∑–Ω–∞—á–∏—Ç /payment/mapping –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∏ –≤—ã–∑–≤–∞—Ç—å –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        if (userId == null) {
            System.out.println("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω userId –¥–ª—è purchaseId: " + purchaseId);
            return 0; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–¥—Ä—É–≥ –º—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —Ç–∞–∫–æ–π orderId (RuStore –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å–æ–≤)
        if (paymentRepository.existsByTransactionId(orderId)) {
            System.out.println("üîé –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è " + orderId + " —É–∂–µ –µ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: " + invoice.getStatusNew());
            return 0; // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        }

        // 3. –£–∑–Ω–∞—ë–º quantity ‚Äî –ª–∏–±–æ –∏–∑ invoice, –ª–∏–±–æ (–µ—Å–ª–∏ 0) —á–µ—Ä–µ–∑ Public API RuStore –ø–æ purchaseToken
        int quantityFromInvoice = invoice.getQuantity();
        if (quantityFromInvoice <= 0) {
            // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ RuStore –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–æ quantity –≤ –∫–æ–ª–±—ç–∫–µ
            quantityFromInvoice = fetchQuantityFromRuStore(invoice.getPurchaseToken());
        }

        // 4. –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ ¬´–≥—Ä—É—à¬ª –ø–æ–ª–æ–∂–µ–Ω–æ –∑–∞ productCode (—Å —É—á—ë—Ç–æ–º quantity)
        int pears = calculatePears(productCode, quantityFromInvoice);

        // 5. –ü—Ä–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —É—Å–ª–æ–≤–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 –≥—Ä—É—à–∞ = 100 –∫–æ–ø–µ–µ–∫
        BigDecimal amount = BigDecimal.valueOf(pears * 100);

        // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        Payment payment = Payment.builder()
                .userId(userId)
                .productId(productCode)
                .transactionId(orderId)
                .amount(amount)
                .confirmed(true)
                .build();

        paymentRepository.save(payment);

        // 7. –ù–∞—á–∏—Å–ª—è–µ–º ¬´–≥—Ä—É—à–∏¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        user.setPears(user.getPears() + pears);
        userRepository.save(user);

        System.out.println("‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ " + pears + " –≥—Ä—É—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID=" + userId);
        return user.getPears();
    }

    private int fetchQuantityFromRuStore(String purchaseToken) {
        try {
            // 1) URL –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RuStore (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
            String url = "https://public-api.rustore.ru/public/v1/payment-info?token=" + purchaseToken;

            // 2) –ó–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Public-Token:
            // headers.set("Public-Token", "–í–ê–®_–ü–£–ë–õ–ò–ö_–¢–û–ö–ï–ù");
            // –∏–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω Bearer-—Ç–æ–∫–µ–Ω:
            // headers.set("Authorization", "Bearer –í–ê–®_–ü–£–ë–õ–ò–ö_–¢–û–ö–ï–ù");

            HttpEntity<Void> requestEntity = new HttpEntity<>(headers);
            RestTemplate restTemplate = new RestTemplate();

            // 3) –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    requestEntity,
                    String.class
            );

            // 4) –ü–∞—Ä—Å–∏–º JSON
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(response.getBody());
            // –î–æ–ø—É—Å—Ç–∏–º, –≤ "body" –ª–µ–∂–∏—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º "quantity"
            int quantity = root.path("body").path("quantity").asInt(1); // fallback = 1

            System.out.println("üéØ –ò–∑ RuStore API –ø–æ–ª—É—á–∏–ª–∏ quantity=" + quantity);
            return quantity;

        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ RuStore: " + e.getMessage());
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return 1;
        }
    }



    private int calculatePears(String productCode, int quantity) {
        return switch (productCode) {
            case "pear_id"       -> 1   * quantity;
            case "pear_pack_10"  -> 10  * quantity;
            case "pear_pack_50"  -> 50  * quantity;
            case "pear_pack_100" -> 100 * quantity;
            default              -> 0;
        };
    }

}
